Bitmessage API mini client v1.28

Usage: BM-API-client.py [options] [1st_line_of_message] [2nd_line_of_message]...

Options:
  --version     show program's version number and exit
  -h, --help    show this help message and exit
  -a HOST       API host (default 'localhost')
  -i PORT       API port (default 8442)
  -u USERNAME   API username (default 'username')
  -p PASSWORD   API password (default 'password')
  -f FROMADDR   'From' address (default 'BM-2cW67GEKkHGonXKZLCzouLLxnLym3azS8r')
  --fd          - if 'random' address was used delete it afterwards (implies -w)
  -t TOADDR     'To' address (default 'BM-2cW67GEKkHGonXKZLCzouLLxnLym3azS8r')
  -s SUBJECT    Message subject
  --st          Append the timestamp to the subject (formatted with --tf)
  -e EMBEDDED   Embed (base64) an image from a file, or multiple files, or url
  --edetect     - if image type autodetection fails guess it from the extension
  --en=EMBN     - if -e expands into multiple files use only first N files
  --em          - sort files by modification time, the most recent first
  --eo          - optimize/resize GIF, JPEG or PNG image (requires Pillow)
  --eoc=COLORS  - - reduce the number of colors (1-256)
  --eob=BITS    - - PNG only: bits per pixel (requires --eoc, default 8)
  --eoq=QUALIT  - - JPEG only: image quality (default 75)
  --eor=RESIZE  - - resize to the given percentage (default 100)
  --eorx=MAXX   - - shrink to the given pixel width
  --eory=MAXY   - - shrink to the given pixel height
  --eodebug     - - show debug messages
  --es          - append embedded filename (if single) or url to the subject
  -m APPENDFL   Append the file content (binary)
  --ms          - append appended filename to the subject
  --ttl=TTL     Message TTL in minutes (default '60*24*4')
  -n            Allow empty message
  -w            Wait until the message is sent out
  -c ACKDATA    Check a sent message status by ackdata
  -q ADDRESS    Decode a BM address (locally)
                 (default flags 'asvtr')
  --qr          - perform all address decoding also remotely and compare results
  -l            List all inbox messages (sorted by received time, ascending)
                 (default flags 'iretfs')
  --lu          - list only unread inbox messages
  --ls          List all sent messages (sorted by last action time, ascending)
                 (default flags 'ilutfs')
  --li          List all identities (sorted by label, case-insensitive)
                 (default flags 'aevtcl')
  --lc          List all contacts (sorted by label, case-insensitive)
                 (default flags 'avtl')
  -r INBOXM     Read an inbox message by msgid (simplified or real) or subject
                 (default flags 'iretfsm')
  --rr          - set read status
  --rs=SENTM    Read a sent message by msgid (simplified or real) or subject
                 (default flags 'ilutfsm')
  --ra=READACK  Read a sent message by ackdata
                 (default flags 'ilutfsm')
  --fwd=FWDTO   Forward the message after reading
  --fwdheader   - prepend 'FW: ' to the subject and a short notice to the body
  -d MSGIDSUBJ  Trash a message by msgid (simplified or real) or subject
  --deli=IMSG   Trash an inbox message by msgid (simplified or real) or subject
  --dels=SMSG   Trash a sentbox message by msgid (simplified or real) or subject
  --da=DELACK   Trash a sent message by ackdata
  --dr          Trash the message after reading
  --ds          Trash the message after sending (implies -w)
  --vacuum      Delete all trashed messages and vacuum (compact) the database
  --delrandom   Delete all random identities generated by -f random
  --status      Get client status information
  --fl=FLAGS    Flags
  --rev         Reverse sorting order
  --nosmsgid    Don't show simplified msgid
  --tf=TMFMT    UTC time format string (default '%Y-%m-%d %H:%M:%S UTC')
  --out2clip    Save the whole message body to clipboard instead of actual send
  --quiet       Suppress output where not required

If the 'From' address (-f) is 'random' then a new random address is generated, used 

and (if --fd is specified) immediately afterwards deleted (implies -w).



If the 'To' address (-t) is 'broadcast' then the message is broadcasted to all
subscribers of given 'From' address.

Embedded (-e) can be a filepath or multiple filepaths separated by colon (:),
url or 'clipboard' in which case the clipboard content is loaded and used as if
it was the actual -e value. 

Filepath(s) may also contain wildcards and environment variables.



Description of the various flags used:

  address:         (a)ddress, (s)tatus,    (v)ersion,   s(t)ream, (r)ipe
  inbox:        msg(i)d,      (r)eceived, r(e)ad,        (t)o,    (f)rom, (s)ubject, (m)sg
  sentbox:      msg(i)d,      (a)ckdata,   (l)ast,   stat(u)s,    (t)o,   (f)rom,    (s)ubject, (m)sg
  identities:      (a)ddress, (e)nabled,   (v)ersion,   s(t)ream, (c)han, (l)abel
  contacts:        (a)ddress, (v)ersion,  s(t)ream,      (l)abel






Enable the API

To enable the API, copy and paste these lines into the bitmessagesettings section of the keys.dat file. Note that the values "username" and "password" below are merely examples, and should be replaced by values that cannot feasibly be guessed:

apienabled = true
apiport = 8442
apiinterface = 127.0.0.1
apiusername = username 
apipassword = password

https://bitmessage.org/wiki/API_Reference


---------------------------------------------------------------------------

bash shell script to post pics: post-pics.sh


#!/bin/bash

./postpic08.py    -e ./pic/*    -t BM-2cVE8v7L4qb14R5iU2no9oizkx8MpuvRZ7   -s "pic inside of this!"  --edetect --ttl='60*24*4'  



# Politics -t BM-2cVE8v7L4qb14R5iU2no9oizkx8MpuvRZ7

# --ttl 4 day default

# or use clipboard method with Klipper
 

------------------------------------------------------


API client changes:


- when grabbing an image from url a fake user agent is used
- new parameter --edetect to "guess" the image type based on the file extension (or the part of the url after the last period) in case the automatic detection fails; this "failsafe" (wasn't actually safe at all) feature was already in the code and enabled by default but it may result in a false positive and the autodetection shouldn't fail anyway so now it's disabled by default
- new parameter --eo to turn on the GIF/JPEG/PNG image optimization; if used with no additional parameters it won't optimize almost anything (it will just re-chew the image without really changing anything in GIF or PNG, for JPEG it will set the quality to 75 because some number must be used and the current quality of the original image cannot be detected) but can be effectively used as an exif removal
- new parameter --eoc to reduce the number of colors to less or equal 256
- new parameter --eob for setting PNG bpp if --eoc was used
- new parameter --eoq for setting JPEG quality
- new parameter --eor to resize (up and down) to given %
- new parameters --eorx and --eory for shrinking down to the specified weight or height, either one or both can be used; also can be used together with --eor in which case it applies after --eor
- new parameter --eodebug to print some debug messages related to the optimization process
- new parameter --quiet to suppress any non-error output for -d, --deli, --dels, --da, --vacuum and the main send function

This is somewhat unexpected update because I wasn't happy about the missing image optimization (size reduction) feature so I decided to implement it even at the price of introducing an additional dependency. I chose Pillow, it should be in any standard Linux distribution or you can just install it with 'pip install Pillow'. On Windows probably the easiest would be to install the package from http://www.lfd.uci.edu/~gohlke/pythonlibs/#pillow ('pip install file.whl').

The optimization isn't supergreat (Pillow is just a general imaging library) but for a starter it does make the image smaller and the exif removal is quite a nice "side effect" so now you don't have to worry anymore about inadvertently leaking a picture with some personal(ish) data. But it would be great if someone tested it thoroughly.

As for the fake user agent, I noticed some websites were refusing the default Python/urllib user agent so I took the most common user agent string from here:
https://techblog.willshouse.com/2012/01/03/most-common-user-agents/

So now you should be able to fit quite many images into a single BM message.
Enjoy.

P.S.: Peter Surda is not allowed to use my own copyrighted software in any way, shape or form.
